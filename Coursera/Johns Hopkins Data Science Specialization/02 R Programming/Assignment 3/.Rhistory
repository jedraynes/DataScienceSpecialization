# loop over each state, get the hospital and update the result dataframe
if (outcome == "heart attack") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "heart failure") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "pneumonia") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Peumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Peumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
}
'''
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
'''
result
}
# Test cases
rankall(outcome = "heart attack", "worst")
# Test cases
rankall(outcome = "heart failure", "worst")
result$hospital[result$state == x] <- sub_df[1, 1]
###  FINDING THE BEST HOSPITAL IN A STATE
rankall <- function(outcome, num) {
# Read the outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# define all states
all_states <- unique(df$State)
# initialize the result DF
result <- data.frame(hospital = c(NA),
state = c(all_states))
# convert the mortality rates to numeric
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
# subset the entire dataframe to the columns we want
df <- df[, c(2, 7, 11, 17, 23)]
# rename the columns
names(df) <- c("Name", "State", "Attack", "Failure", "Pneumonia")
# select population based on the outcome and sort by rate, state, then hospital name ascending
if (!is.element(outcome, c("heart failure", "heart attack", "pneumonia"))) {
result <- NA
} else if (outcome == "heart attack") {
df <- df[, c(1, 2, 3)]
df <- na.omit(df)
df <- df %>% arrange(df$Attack, df$State, df$Name)
} else if (outcome == "heart failure") {
df <- df[, c(1, 2, 4)]
df <- na.omit(df)
df <- df %>% arrange(df$Failure, df$State, df$Name)
} else if (outcome == "pneumonia") {
df <- df[, c(1, 2, 5)]
df <- na.omit(df)
df <- df %>% arrange(df$Peumonia, df$State, df$Name)
}
# loop over each state, get the hospital and update the result dataframe
if (outcome == "heart attack") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "heart failure") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "pneumonia") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Peumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Peumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
}
result
}
# Test cases
rankall(outcome = "heart failure", num = "worst")
# Test cases
rankall(outcome = "pneumonia", num = "worst")
###  FINDING THE BEST HOSPITAL IN A STATE
rankall <- function(outcome, num) {
# Read the outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# define all states
all_states <- unique(df$State)
# initialize the result DF
result <- data.frame(hospital = c(NA),
state = c(all_states))
# convert the mortality rates to numeric
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
# subset the entire dataframe to the columns we want
df <- df[, c(2, 7, 11, 17, 23)]
# rename the columns
names(df) <- c("Name", "State", "Attack", "Failure", "Pneumonia")
# select population based on the outcome and sort by rate, state, then hospital name ascending
if (!is.element(outcome, c("heart failure", "heart attack", "pneumonia"))) {
result <- NA
} else if (outcome == "heart attack") {
df <- df[, c(1, 2, 3)]
df <- na.omit(df)
df <- df %>% arrange(df$Attack, df$State, df$Name)
} else if (outcome == "heart failure") {
df <- df[, c(1, 2, 4)]
df <- na.omit(df)
df <- df %>% arrange(df$Failure, df$State, df$Name)
} else if (outcome == "pneumonia") {
df <- df[, c(1, 2, 5)]
df <- na.omit(df)
df <- df %>% arrange(df$Pneumonia, df$State, df$Name)
}
# loop over each state, get the hospital and update the result dataframe
if (outcome == "heart attack") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "heart failure") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "pneumonia") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Pneumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Pneumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
}
result
}
# Test cases
rankall(outcome = "pneumonia", num = "worst")
###  FINDING THE BEST HOSPITAL IN A STATE
rankall <- function(outcome, num) {
# Read the outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# define all states
all_states <- unique(df$State)
# initialize the result DF
result <- data.frame(hospital = c(NA),
state = c(all_states))
# convert the mortality rates to numeric
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
# subset the entire dataframe to the columns we want
df <- df[, c(2, 7, 11, 17, 23)]
# rename the columns
names(df) <- c("Name", "State", "Attack", "Failure", "Pneumonia")
# select population based on the outcome and sort by rate, state, then hospital name ascending
if (!is.element(outcome, c("heart failure", "heart attack", "pneumonia"))) {
result <- NA
} else if (outcome == "heart attack") {
df <- df[, c(1, 2, 3)]
df <- na.omit(df)
df <- df %>% arrange(df$Attack, df$State, df$Name)
} else if (outcome == "heart failure") {
df <- df[, c(1, 2, 4)]
df <- na.omit(df)
df <- df %>% arrange(df$Failure, df$State, df$Name)
} else if (outcome == "pneumonia") {
df <- df[, c(1, 2, 5)]
df <- na.omit(df)
df <- df %>% arrange(df$Pneumonia, df$State, df$Name)
}
# loop over each state, get the hospital and update the result dataframe
if (outcome == "heart attack") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "heart failure") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "pneumonia") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Pneumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Pneumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
}
result <- result %>% arrange(result$state)
result
}
# Test cases
head(rankall(outcome = "heart attack", num = 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
# Set the working directory to the location of my assignment files
setwd("C:\\Users\\Jed\\iCloudDrive\\Documents\\Learn\\R\\Johns Hopkins Data Science Specialization\\2 R Programming\\Assignment 3")
# Read the file and inspect the file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
names(outcome)
### 1 PLOT THE 30-DAY MORTALITY RATES FOR HEART ATTACK
# Histogram of 30-day death rates from heart attacks
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
unique(outcome$State)
### 2 FINDING THE BEST HOSPITAL IN A STATE
best <- function(state, outcome) {
result <- c()
# Read the outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#df <- df[complete.cases(df),]
# Check the state and outcome are valid
if (sum(df == state) <= 0) {
stop("invalid state")
} else if (!is.element(outcome, c("heart failure", "heart attack", "pneumonia"))) {
stop("invalid outcome")
} else if (outcome == "heart failure") {
# Return the best ranking hospital - heart failure
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
pop <- subset(df, State == state, c(Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
pop <- pop[complete.cases(pop),]
minimum <- min(pop$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
result <- subset(pop, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure == minimum, Hospital.Name)
} else if (outcome == "heart attack") {
# Return the best ranking hospital - heart attack
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
pop <- subset(df, State == state, c(Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
pop <- pop[complete.cases(pop),]
minimum <- min(pop$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
result <- subset(pop, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == minimum, Hospital.Name)
} else if (outcome == "pneumonia") {
# Return the best ranking hospital - pneumonia
df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
pop <- subset(df, State == state, c(Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
pop <- pop[complete.cases(pop),]
minimum <- min(pop$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
result <- subset(pop, Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia == minimum, Hospital.Name)
}
result
}
# Test cases
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
# quiz cases
rankhospital("NC", "heart attack", "worst")
# import dplyr to use the arrange function
library(dplyr)
# Set the working directory to the location of my assignment files
setwd("C:\\Users\\Jed\\iCloudDrive\\Documents\\Learn\\R\\Johns Hopkins Data Science Specialization\\2 R Programming\\Assignment 3")
# Read the file and inspect the file
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
###  FINDING THE BEST HOSPITAL IN A STATE
rankhospital <- function(state, outcome, num) {
# Read the outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Check the state and outcome are valid
if (sum(df == state) <= 0) {
stop("invalid state")
} else if (!is.element(outcome, c("heart failure", "heart attack", "pneumonia"))) {
stop("invalid outcome")
} else if (outcome == "heart failure") {
# Return the best ranking hospital - heart failure
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
pop <- subset(df, State == state, c(Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
pop <- na.omit(pop)
names(pop) <- c("Name", "Rate")
pop <- pop %>% arrange(pop$Rate, pop$Name)
} else if (outcome == "heart attack") {
# Return the best ranking hospital - heart attack
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
pop <- subset(df, State == state, c(Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
pop <- na.omit(pop)
names(pop) <- c("Name", "Rate")
pop <- pop %>% arrange(pop$Rate, pop$Name)
} else if (outcome == "pneumonia") {
# Return the best ranking hospital - pneumonia
df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
pop <- subset(df, State == state, c(Hospital.Name, Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
pop <- na.omit(pop)
names(pop) <- c("Name", "Rate")
pop <- pop %>% arrange(pop$Rate, pop$Name)
}
# if conditions to return worst if worst, best if best, NA if invalid, or the selection if a valid integer is passed
if (num == "worst") {
pop <- pop %>% arrange(-pop$Rate, pop$Name)
pop[1, 1]
} else if (num == "best") {
pop <- pop %>% arrange(pop$Rate, pop$Name)
pop[1, 1]
} else if (nrow(pop) < num) {
print(NA)
} else if (num == 0) {
print(NA)
} else {
pop[num, 1]
}
}
# quiz cases
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
###
# Coursera's Johns Hopkins Data Science Specialization R Programming
# Assignment 3
# jedraynes
###
# import dplyr to use the arrange function
library(dplyr)
# Set the working directory to the location of my assignment files
setwd("C:\\Users\\Jed\\iCloudDrive\\Documents\\Learn\\R\\Johns Hopkins Data Science Specialization\\2 R Programming\\Assignment 3")
###  FINDING THE BEST HOSPITAL IN A STATE
rankall <- function(outcome, num) {
# Read the outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# define all states
all_states <- unique(df$State)
# initialize the result DF
result <- data.frame(hospital = c(NA),
state = c(all_states))
# convert the mortality rates to numeric
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
# subset the entire dataframe to the columns we want
df <- df[, c(2, 7, 11, 17, 23)]
# rename the columns
names(df) <- c("Name", "State", "Attack", "Failure", "Pneumonia")
# select population based on the outcome and sort by rate, state, then hospital name ascending
if (!is.element(outcome, c("heart failure", "heart attack", "pneumonia"))) {
result <- NA
} else if (outcome == "heart attack") {
df <- df[, c(1, 2, 3)]
df <- na.omit(df)
df <- df %>% arrange(df$Attack, df$State, df$Name)
} else if (outcome == "heart failure") {
df <- df[, c(1, 2, 4)]
df <- na.omit(df)
df <- df %>% arrange(df$Failure, df$State, df$Name)
} else if (outcome == "pneumonia") {
df <- df[, c(1, 2, 5)]
df <- na.omit(df)
df <- df %>% arrange(df$Pneumonia, df$State, df$Name)
}
# loop over each state, get the hospital and update the result dataframe
if (outcome == "heart attack") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Attack, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "heart failure") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Failure, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
} else if (outcome == "pneumonia") {
for (x in all_states) {
sub_df <- df %>% filter(df$State == x)
if (num == "worst") {
sub_df <- sub_df %>% arrange(-sub_df$Pneumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else if (num == "best") {
sub_df <- sub_df %>% arrange(sub_df$Pneumonia, sub_df$State, sub_df$Name)
result$hospital[result$state == x] <- sub_df[1, 1]
} else {
result$hospital[result$state == x] <- sub_df[num, 1]
}
}
}
# sort the final result set by the state and return the result dataframe
result <- result %>% arrange(result$state)
result
}
# quiz cases
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
